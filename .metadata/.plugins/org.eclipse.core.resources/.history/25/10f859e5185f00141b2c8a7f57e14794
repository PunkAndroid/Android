package com.example.opengltest1;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.app.Activity;
import android.app.Fragment;
import android.opengl.GLES30;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {
            getFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
 //           View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            GLSurfaceView mGLView = new GLSurfaceView(getActivity());
            mGLView.setRenderer(new ClearRenderer());
            
            return mGLView;
        }
    }
    public static class ClearRenderer implements GLSurfaceView.Renderer{
   
    	
		private Triangle mTriangle;
		@Override
		public void onSurfaceCreated(GL10 gl, EGLConfig config) {
			// TODO Auto-generated method stub
			gl.glClearColor(0.5f, 0.5f, 0.5f, 1.0f);
			
			mTriangle = new Triangle();
		}

		@Override
		public void onSurfaceChanged(GL10 gl, int width, int height) {
			// TODO Auto-generated method stub
			gl.glViewport(0, 0, width, height);
		}

		@Override
		public void onDrawFrame(GL10 gl) {
			// TODO Auto-generated method stub
//			gl.glClear(GLES30.GL_COLOR_BUFFER_BIT|GLES30.GL_DEPTH_BUFFER_BIT);
			gl.glClear(GLES30.GL_COLOR_BUFFER_BIT);
			mTriangle.draw();
		}
		public static int loadShader(int type, String shaderCode){

		    // 创建一个vertex shader类型(GLES20.GL_VERTEX_SHADER)
		    // 或fragment shader类型(GLES20.GL_FRAGMENT_SHADER)
		    int shader = GLES30.glCreateShader(type);

		    // 将源码添加到shader并编译之
		    GLES30.glShaderSource(shader, shaderCode);
		    GLES30.glCompileShader(shader);

		    return shader;
		}
		class Triangle{
	    	private FloatBuffer vertexBuffer;
	    	private int mPositionHandle;
	    	private int mProgram;
	    	private int mColorHandle;
	    	private int vertexStride;
			private int vertexCount;
			
	     	private final String vertexShaderCode =
	    		    "attribute vec4 vPosition;" +
	    		    "void main() {" +
	    		    "  gl_Position = vPosition;" +
	    		    "}";

	    		private final String fragmentShaderCode =
	    		    "precision mediump float;" +
	    		    "uniform vec4 vColor;" +
	    		    "void main() {" +
	    		    "  gl_FragColor = vColor;" +
	    		    "}";
	    	
	    	//顶点坐标
	    	static final int COORDS_PER_VERTEX = 3;
	    	float triangleCoords[] = {
	    		0.0f,0.622008459f,0.0f, //top 
	    	    -0.5f,-0.311004243f,0.0f,   // bottom left
	    	    0.5f,-0.311004243f,0.0f    // bottom right
	    		
	    	};
	    	//设置颜色，分别为red,green,blue和alpha(opacity)
	    	float color[] = {0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

	    	public Triangle(){
	    		//为存放形状的坐标，初始化顶点字节缓冲
	    		ByteBuffer bb = ByteBuffer.allocateDirect(triangleCoords.length*4);// (坐标数 * 4)float占四字节
	    		//设用设备的本点字节序
	    		bb.order(ByteOrder.nativeOrder());
	    		
	    		// 从ByteBuffer创建一个浮点缓冲
	            vertexBuffer = bb.asFloatBuffer();
	            // 把坐标们加入FloatBuffer中
	            vertexBuffer.put(triangleCoords);
	            // 设置buffer，从第一个坐标开始读
	            vertexBuffer.position(0);
	            
	            int vertexShader = loadShader(GLES30.GL_VERTEX_SHADER, vertexShaderCode);
	            int fragmentShader = loadShader(GLES30.GL_FRAGMENT_SHADER, fragmentShaderCode);
	            
	            mProgram = GLES30.glCreateProgram();			// 创建一个空的OpenGL ES Program
	            GLES30.glAttachShader(mProgram, vertexShader);	// 将vertex shader添加到program
	            GLES30.glAttachShader(mProgram, fragmentShader);// 将fragment shader添加到program
	            GLES30.glLinkProgram(mProgram); 				// 创建可执行的 OpenGL ES program
	    	}
	    	public void draw() {
			    // 将program加入OpenGL ES环境中
			    GLES30.glUseProgram(mProgram);

			    // 获取指向vertex shader的成员vPosition的 handle
			    mPositionHandle = GLES30.glGetAttribLocation(mProgram, "vPosition");

			    // 启用一个指向三角形的顶点数组的handle
			    GLES30.glEnableVertexAttribArray(mPositionHandle);

			    // 准备三角形的坐标数据
			    GLES30.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
			                                 GLES30.GL_FLOAT, false,
			                                 vertexStride, vertexBuffer);

			    // 获取指向fragment shader的成员vColor的handle 
			    mColorHandle = GLES30.glGetUniformLocation(mProgram, "vColor");

			    // 设置三角形的颜色
			    GLES30.glUniform4fv(mColorHandle, 1, color, 0);

			    // 画三角形
			    GLES30.glDrawArrays(GLES30.GL_TRIANGLES, 0, vertexCount);

			    // 禁用指向三角形的顶点数组
			    GLES30.glDisableVertexAttribArray(mPositionHandle);
			}
	    }
    }   
}
