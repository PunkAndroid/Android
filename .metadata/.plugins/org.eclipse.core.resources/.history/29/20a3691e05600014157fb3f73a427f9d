package com.example.opengltest1;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES20;
import android.opengl.GLES30;
import android.opengl.GLSurfaceView;
import android.opengl.GLSurfaceView.Renderer;


public class OpenGLRender implements Renderer{
	   
	
	private Triangle mTriangle;
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		// Set the background color to black ( rgba ).
		gl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f);
		// Enable Smooth Shading, default not really needed.
		gl.glShadeModel(GL10.GL_SMOOTH);
		// Depth buffer setup.
		gl.glClearDepthf(1.0f);
		// Enables depth testing.
		gl.glEnable(GL10.GL_DEPTH_TEST);
		// The type of depth testing to do.
		gl.glDepthFunc(GL10.GL_LEQUAL);
		// Really nice perspective calculations.
		gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
		mTriangle = new Triangle();
	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		// TODO Auto-generated method stub
		gl.glViewport(0, 0, width, height);
	}

	@Override
	public void onDrawFrame(GL10 gl) {
		// TODO Auto-generated method stub
//		gl.glClear(GLES30.GL_COLOR_BUFFER_BIT|GLES30.GL_DEPTH_BUFFER_BIT);
//		gl.glClear(GLES30.GL_COLOR_BUFFER_BIT);
		mTriangle.draw();
	}
	public static int loadShader(int type, String shaderCode){

	    // 创建一个vertex shader类型(GLES20.GL_VERTEX_SHADER)
	    // 或fragment shader类型(GLES20.GL_FRAGMENT_SHADER)
	    int shader = GLES20.glCreateShader(type);

	    // 将源码添加到shader并编译之
	    GLES20.glShaderSource(shader, shaderCode);
	    GLES20.glCompileShader(shader);

	    return shader;
	}
	class Triangle{
    	private FloatBuffer vertexBuffer;
    	private int mPositionHandle;
    	private int mProgram;
    	private int mColorHandle;
    	private int vertexStride;
		private int vertexCount;
		
     	private final String vertexShaderCode =
    		    "attribute vec4 vPosition;" +
    		    "void main() {" +
    		    "  gl_Position = vPosition;" +
    		    "}";

    		private final String fragmentShaderCode =
    		    "precision mediump float;" +
    		    "uniform vec4 vColor;" +
    		    "void main() {" +
    		    "  gl_FragColor = vColor;" +
    		    "}";
    	
    	//顶点坐标
    	static final int COORDS_PER_VERTEX = 3;
    	float triangleCoords[] = {
    		0.0f,0.622008459f,0.0f, //top 
    	    -0.5f,-0.311004243f,0.0f,   // bottom left
    	    0.5f,-0.311004243f,0.0f    // bottom right
    		
    	};
    	//设置颜色，分别为red,green,blue和alpha(opacity)
    	float color[] = {0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

    	public Triangle(){
    		//为存放形状的坐标，初始化顶点字节缓冲
    		ByteBuffer bb = ByteBuffer.allocateDirect(triangleCoords.length*4);// (坐标数 * 4)float占四字节
    		//设用设备的本点字节序
    		bb.order(ByteOrder.nativeOrder());
    		
    		// 从ByteBuffer创建一个浮点缓冲
            vertexBuffer = bb.asFloatBuffer();
            // 把坐标们加入FloatBuffer中
            vertexBuffer.put(triangleCoords);
            // 设置buffer，从第一个坐标开始读
            vertexBuffer.position(0);
            
            int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode);
            int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode);
            
            mProgram = GLES20.glCreateProgram();			// 创建一个空的OpenGL ES Program
            GLES20.glAttachShader(mProgram, vertexShader);	// 将vertex shader添加到program
            GLES20.glAttachShader(mProgram, fragmentShader);// 将fragment shader添加到program
            GLES20.glLinkProgram(mProgram); 				// 创建可执行的 OpenGL ES program
    	}
    	public void draw() {
		    // 将program加入OpenGL ES环境中
		    GLES20.glUseProgram(mProgram);

		    // 获取指向vertex shader的成员vPosition的 handle
		    mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");

		    // 启用一个指向三角形的顶点数组的handle
		    GLES20.glEnableVertexAttribArray(mPositionHandle);

		    // 准备三角形的坐标数据
		    GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
		                                 GLES20.GL_FLOAT, false,
		                                 vertexStride, vertexBuffer);

		    // 获取指向fragment shader的成员vColor的handle 
		    mColorHandle = GLES20.glGetUniformLocation(mProgram, "vColor");

		    // 设置三角形的颜色
		    GLES20.glUniform4fv(mColorHandle, 1, color, 0);

		    // 画三角形
		    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);

		    // 禁用指向三角形的顶点数组
		    GLES20.glDisableVertexAttribArray(mPositionHandle);
		}
    }
}   
