package com.android.vivotest;

import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.security.InvalidAlgorithmParameterException;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.opengl.GLSurfaceView;
import android.opengl.GLU;
import android.opengl.GLUtils;
import android.util.Log;

public class MyGLRender implements GLSurfaceView.Renderer{
    private Resources mRes;
	private Buffer rectBuff;
	private Buffer tBuff; 
//	float v[] = new float[] {
//            -1f, -1.78f,  0f,
//            1f, -1.78f,  0f,
//            -1f,  1.78f,  0f,
//            1f,  1.78f,  0f,
//	};
//	float v[] = new float[] {
//            -540f, -1920f,0,
//            540f, -1920f, 0,
//            -540f,  1920f,0,
//            540f,  1920f,0
//	};
	float v[] = new float[] {
            -540f, -960f,-1,
            540f, -960f, -1,
            -540f,  960f,-1,
            540f,  960f,-1
	};
	float t[] = new float[] {
	        0.0f, 1.0f,
            1.0f, 1.0f,
            0.0f, 0.0f,
            1.0f, 0.0f,
	};
	private int tex;
	private Options option;	
	
    public MyGLRender(Resources res) {
        // currentMovement = 0;
        //Log.d("aquarium", "glesDevRenderer::glesDevRenderer()");
        mRes = res;
        rectBuff = makeFloatBuffer(v);
        tBuff = makeFloatBuffer(t);
        BitmapFactory.Options option = new BitmapFactory.Options();
        option.inDither = true;
        option.inSampleSize = 1;
        option.inScaled = false;
        option.inPreferredConfig = Bitmap.Config.ARGB_8888;
    }
    int i = 0;
	@Override
	public void onDrawFrame(GL10 gl) {
		// TODO Auto-generated method stub
		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);

		gl.glMatrixMode(GL10.GL_MODELVIEW);
		gl.glLoadIdentity();
//		GLU.gluLookAt(gl, 0, 0, -1f, 0, 0, 0, 0, 1, 0);
		if(i == 0){
			Bitmap bmp = BitmapFactory.decodeResource(mRes, R.drawable.snow_day, option);
	        GLUtils.texSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0,bmp);
	        Log.d("ftl","ftl 0");
	        i = 1;
		}else if(i == 1){
			Bitmap bmp = BitmapFactory.decodeResource(mRes, R.drawable.aa, option);
	        GLUtils.texSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0,bmp);
	        Log.d("ftl","ftl 1");
	        i = 0;
		}
		gl.glBindTexture(GL10.GL_TEXTURE_2D, tex);
		gl.glEnable(GL10.GL_TEXTURE_2D);
		gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, 4);
		

	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		// TODO Auto-generated method stub
		gl.glViewport(0, 0, width, height);
		Log.d("ftl","ftl zz width="+width+" height="+height);
		float ratio = (float) width / height;
		gl.glMatrixMode(GL10.GL_PROJECTION);
		gl.glLoadIdentity();
//		GLU.gluPerspective(gl, 90.0f, ratio, 1, 5000);
//        GLU.gluOrtho2D(gl, 0, width,height, 0);
		GLU.gluOrtho2D(gl, -width/2, width/2,-height/2, height/2);
		gl.glMatrixMode(GL10.GL_MODELVIEW);
        
	}

	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		// TODO Auto-generated method stub
		gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		gl.glClearDepthf(1.0f);
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, rectBuff);
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, tBuff);
		gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
        gl.glShadeModel(GL10.GL_SMOOTH);
        gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST); 
        gl.glCullFace(GL10.GL_BACK);
		tex =  loadTextureFromResource(mRes, gl,R.drawable.snow_day);
	}
    protected int loadTextureFromResource(Resources res, GL10 igl, int resID) {
        GL11 gl = (GL11) igl;
        Bitmap bmp = null;
        
        bmp = BitmapFactory.decodeResource(res, resID, option);
//        // if(Integer.toBinaryString(bmp.getWidth()).replaceAll("0",
//        // "").length() == 1)
//        // Log.d("imagesize","the image  is powers of 2");
//        // if(Integer.toBinaryString(bmp.getHeight()).replaceAll("0",
//        // "").length() == 1)
//        // Log.d("imagesize","the image  is powers of 2");
//        int scalewidth = bmp.getWidth(), scaleheight = bmp.getHeight();
//        // Log.d("scale", "origwidth =" + scalewidth + ",origheight=" +
//        // scaleheight);
//        if (Shared.isPowerOf2(bmp.getWidth()) == true)
//            ;// Log.d("imagesize", "the image  is powers of 2");
//        else
//            scalewidth = Shared.nextPowerOf2(scalewidth);
//        if (Shared.isPowerOf2(bmp.getHeight()) == true)
//            ;// Log.d("imagesize", "the image  is powers of 2");
//        else
//            scaleheight = Shared.nextPowerOf2(scaleheight);
//        // Log.d("scale", "scalewidth =" + scalewidth + ",scaleheight=" +
//        // scaleheight);
//        bmp = Bitmap.createScaledBitmap(bmp, scalewidth, scaleheight, false);

        int[] tex = new int[1];
        gl.glGenTextures(1, tex, 0);
        gl.glBindTexture(GL11.GL_TEXTURE_2D, tex[0]);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);

        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER,
                GL10.GL_LINEAR_MIPMAP_NEAREST);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_GENERATE_MIPMAP, GL11.GL_TRUE);
        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bmp, 0);
        // Log.d("init", "9 error =" + GLU.gluErrorString(gl.glGetError()));

        bmp.recycle();
        bmp = null;
        return tex[0];
    }
    
    protected FloatBuffer makeFloatBuffer(float[] arr) {
        ByteBuffer bb = ByteBuffer.allocateDirect(arr.length << 2);
        bb.order(ByteOrder.nativeOrder());
        FloatBuffer fb = bb.asFloatBuffer();
        fb.put(arr);
        fb.position(0);
        return fb;
    }
}
